import telebot
from telebot import types

API_TOKEN = 'token'

bot = telebot.TeleBot(API_TOKEN)


main_menu_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_menu_keyboard.add(types.KeyboardButton('Tools üõ†Ô∏è'), types.KeyboardButton('Tutorials üë®‚Äçüè´'), types.KeyboardButton('Books üìö'), types.KeyboardButton('Dictionaries üìí'), types.KeyboardButton('About ‚ÑπÔ∏è'))

tools_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
tool_buttons = [
    types.KeyboardButton(text="BugBounty üí∞"),
    types.KeyboardButton(text="Forensics üïµÔ∏è‚Äç‚ôÇÔ∏è"),
    types.KeyboardButton(text="Cryptography üîê"),
    types.KeyboardButton(text="Reverse Engineering üîë"),
    types.KeyboardButton(text="Steganography üôà"),
    types.KeyboardButton(text="CTF Write-Upsüö©"),
    types.KeyboardButton(text="Extensions üß©"),
    types.KeyboardButton(text="OSINT üîç"),
    types.KeyboardButton(text="Google Dorking üëÄ"),
]
tools_keyboard.add(*tool_buttons)
tools_keyboard.add(types.KeyboardButton(text="Back ‚è™"))

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, "üëã Hello! With my functionality, you can discover the best tools and training in cybersecurity. Please select an option from the menu.", reply_markup=main_menu_keyboard)

@bot.message_handler(func=lambda message: message.text == 'About ‚ÑπÔ∏è')
def handle_about(message):
   about_text = (
    "üëÄ This bot was created by a cybersecurity enthusiast, mihasha, "
    "as a note to share experience.\n\n"
    "The bot includes all the tools and useful information that the creator uses during their work.\n\n"
    "‚ö†Ô∏è Unauthorized hacking is illegal. This bot is for educational use only, aimed at teaching ethical hacking, penetration testing, and bug hunting techniques. \n\n "
    "‚ÄºÔ∏è The purpose is to enhance your skills in cybersecurity to better defend against malicious hackers.\n\n"
    "‚õîÔ∏è Author doesn't promote or encourage any illegal activities.\n\n"
)

   bot.send_message(message.chat.id, about_text, reply_markup=main_menu_keyboard)



@bot.message_handler(func=lambda message: message.text == 'Tools üõ†Ô∏è')
def handle_tools(message):
    bot.send_message(message.chat.id, "Please choose category", reply_markup=tools_keyboard)

@bot.message_handler(func=lambda message: message.text == 'BugBounty üí∞')
def handle_pentest_tools(message):
    tools_list = (
    "1. [Burp Suite](https://portswigger.net/burp) - A powerful extensible framework for application testing, including tools like a proxy server, vulnerability scanner, fuzzer, and more.\n"
    "2. [OWASP ZAP](https://www.zaproxy.org/) - An open-source tool with features such as a proxy server, vulnerability scanner, fuzzer, and others.\n"
    "3. [sqlmap](https://sqlmap.org/) - A tool for automatic detection of SQL injection vulnerabilities and exploitation.\n"
    "4. [Nikto](https://cirt.net/Nikto2) - A web server vulnerability scanner that checks for vulnerabilities and outdated components.\n"
    "5. [DirBuster](https://www.owasp.org/index.php/Category:OWASP_DirBuster) - A utility for automatically discovering hidden files and directories on a web server.\n"
    "6. [Wfuzz](https://wfuzz.org/) - A tool for automatic fuzz testing of web applications.\n"
    "7. [Nmap/Zenmap](https://nmap.org/) - A network scanner used for discovering open ports and services.\n"
    "8. [Acunetix](https://www.acunetix.com/) / [Nuclei](https://nuclei.sh/) - Automated web application scanners with features for detecting SQL injections, XSS, CSRF, and other vulnerabilities.\n"
    "9. [Chrome DevTools](https://developer.chrome.com/docs/devtools/) - A browser tool built into Chrome for debugging JavaScript, viewing network traffic, and more.\n"
    "10. [XSSer](https://xsser.ampx.org/) - A utility for automatically detecting XSS (Cross-Site Scripting) vulnerabilities on websites.\n"
    "11. [Gsec](https://github.com/gotr00t0day/Gsec) - A perfect Web Security Scanner.\n"
    "12. [SpyHunt](https://github.com/gotr00t0day/spyhunt) - A comprehensive network scanning and vulnerability assessment tool"
)

    bot.send_message(message.chat.id, f"Tools list:\n{tools_list}", reply_markup=tools_keyboard, parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text == 'Forensics üïµÔ∏è‚Äç‚ôÇÔ∏è')
def handle_forensics_tools(message):
    tools_list2 = (
    "1. [Audacity](https://www.audacityteam.org/) - Analyzes sound files (mp3, m4a, etc.).\n"
    "2. [Bkhive and Samdump2](https://www.cse.ohio-state.edu/~reiter/bkhive/) - Extracts SYSTEM and SAM files.\n"
    "3. [Creddump](https://github.com/creddump/creddump7) - Extracts Windows credentials.\n"
    "4. [Exif Tool](https://exiftool.org/) - Reads, writes, and edits file metadata.\n"
    "5. [Extundelete](https://github.com/extundelete/extundelete) - Recovers lost data from mounted images.\n"
    "6. [Foremost](https://foremost.sourceforge.net/) - Tool for recovering specific types of files based on headers.\n"
    "7. [Fsck.ext4](https://man7.org/linux/man-pages/man8/fsck.ext4.8.html) - Fixes corrupted file systems.\n"
    "8. [Malzilla](https://sourceforge.net/projects/malzilla/) - Tool for finding malware.\n"
    "9. [NetworkMiner](https://www.netresec.com/?page=NetworkMiner) - Analyzes network traffic and searches for various types of files.\n"
    "10. [PDF Streams Inflater](https://github.com/stephane/Tools) - Finds and extracts zlib-compressed files in PDFs.\n"
    "13. [UsbForensics](https://sourceforge.net/projects/usb-forensics/) - Contains tools for USB analysis.\n"
    "14. [Volatility](https://volatilityfoundation.org/) - For analyzing memory dumps."
)


    bot.send_message(message.chat.id, f"Tools list:\n{tools_list2}", reply_markup=tools_keyboard, parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text == 'Cryptography üîê')
def handle_forensics_tools(message):
    crypto_tools_list = (
    "1. [FeatherDuster](https://github.com/featherduster/featherduster) - An automated, modular tool for cryptanalysis.\n"
    "2. [Hash Extender](https://github.com/hashcat/hashcat/blob/master/tools/hash_extender) - A utility for performing hash extension attacks.\n"
    "3. [PkCrack](https://pkcrack.sourceforge.net/) - A tool for breaking PkZip encryption.\n"
    "4. [RSACTFTool](https://github.com/robertdavidgraham/rsactftool) - A utility for recovering RSA private keys using various attacks.\n"
    "5. [RSATool](https://github.com/robertdavidgraham/rsatool) - A program for working with RSA.\n"
    "6. [XORTool](https://github.com/hellman/xortool) - A tool for analyzing multi-byte XOR cipher.\n"
    "7. [John the Ripper](https://www.openwall.com/john/) - A tool for cracking hashes.\n"
    "8. [Hashcat](https://hashcat.net/hashcat/) - A tool for cracking hashes."
)
    bot.send_message(message.chat.id, f"Crypto Tools List:\n{crypto_tools_list}", reply_markup=tools_keyboard, parse_mode='Markdown')


@bot.message_handler(func=lambda message: message.text == 'Reverse Engineering üîë')
def handle_forensics_tools(message):
   reverse_engineering_tools_list = (
    "1. [IDA Pro](https://www.hex-rays.com/ida-pro/) - An integrated development environment for analyzing and decompiling programs.\n"
    "2. [dnSpy](https://github.com/dnSpy/dnSpy) - Decompiler, disassembler, and debugger for .NET platform.\n"
    "3. [ByteCode Viewer](https://bytecodeviewer.com/) - A tool for analyzing Java bytecode using various decompilers. Open Source.\n"
    "4. [jadx](https://github.com/skylot/jadx) - Decompiler for DEX, JAR, and APK files to source code. Open Source.\n"
    "5. [PyInstaller Extractor](https://github.com/extremecoders-re/pyinstxtractor) - Script for extracting contents of EXE files created by PyInstaller. Open Source.\n"
    "6. [uncompyle6](https://github.com/rocky/python-uncompyle6) - Decompiler for Python bytecode (PYC files). Open Source.\n"
    "7. [Frida](https://frida.re/) - A dynamic analysis tool for manipulating executables, processes, and systems. Open Source.\n"
    "8. [Ghidra](https://ghidra-sre.org/) - A platform for analyzing and decompiling programs developed by the NSA.\n"
    "9. [Radare2](https://rada.re/n/) - Free and open-source platform for analyzing and decompiling programs.\n"
    "10. [OllyDbg](http://www.ollydbg.de/) - Debugger for Windows operating system.\n"
    "11. [x64dbg](https://x64dbg.com/) - Debugging tool for applications and programs developed for 32/64-bit architectures.\n"
    "12. [WinDbg](https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools) - Multi-purpose debugger for Windows.\n"
    "13. [GDB](https://www.gnu.org/software/gdb/) - Portable debugger for programs written in C/C++. GNU Project.\n"
    "14. [pwntools](https://pwntools.com/) - Library for automating the process of exploiting programs.\n"
    "15. [AFL](http://lcamtuf.coredump.cx/afl/) - Framework for automatic vulnerability discovery through fuzzing.\n"
    "16. [Angr](https://angr.io/) - Framework for program security analysis.\n"
    "17. [QEMU](https://www.qemu.org/) - Processor emulator.\n"
    "18. [GDB-PEDA](https://github.com/longld/peda) - Plugin for GDB.\n"
    "19. [ROPgadget](https://github.com/JonathanSalwan/ROPgadget) - Tool for finding ROP gadgets.\n"
    "20. [PeachPy](https://peachpy.org/) - Python library for working with assembly code.\n"
)

   bot.send_message(message.chat.id, f"Reverse Engineering Tools List:\n{reverse_engineering_tools_list}", reply_markup=tools_keyboard, parse_mode='Markdown')


@bot.message_handler(func=lambda message: message.text == 'Steganography üôà')
def handle_forensics_tools(message):
    steg_analysis_tools_list = (
    "1. [Convert](https://imagemagick.org/script/convert.php) - Converts images to various formats and applies filters.\n"
    "2. [Exif](https://www.exiv2.org/) - Displays EXIF information in JPEG files.\n"
    "3. [ExifTool](https://exiftool.org/) - Reads and writes metadata in files.\n"
    "4. [Exiv2](https://www.exiv2.org/) - Tool for working with (modifying) image metadata.\n"
    "5. [ImageMagick](https://imagemagick.org/) - Tool for creating, processing, and editing images.\n"
    "6. [Outguess](http://www.outguess.org/) - Versatile tool for performing steganography tasks.\n"
    "7. [Pngtools](https://github.com/stephenfowler/pngtools) - Utility for analyzing PNG files.\n"
    "8. [SmartDeblur](http://smartdeblur.net/) - Used for restoring blurred images.\n"
    "9. [Steganabara](https://github.com/Steganabara/Steganabara) - Steganography analysis tool written in Java.\n"
    "10. [Stegbreak](https://github.com/stephennance/stegbreak) - Utility for finding, detecting, and modifying steganographic inclusions in images.\n"
    "11. [StegCracker](https://github.com/StegCracker/StegCracker) - Utility for finding hidden data within files.\n"
    "12. [stegextract](https://github.com/StegExtract/StegExtract) - Detects hidden files and text in images.\n"
    "13. [Steghide](https://steghide.sourceforge.net/) - Hides data in various types of images.\n"
    "14. [Stegsolve](https://github.com/zardus/ctf-tools/tree/master/steghide) - Applies various steganographic methods to images.\n"
    "15. [Zsteg](https://github.com/zed-0xff/zsteg) - Analyzes PNG/BMP files.\n"
    "16. [Stego-Toolkit](https://github.com/stephenfowler/stego-toolkit) - As the name implies, 'all-in-one'."
)

    bot.send_message(message.chat.id, f"Steganography Tools List:\n{steg_analysis_tools_list}", reply_markup=tools_keyboard, parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text == 'CTF Write-Upsüö©')
def handle_forensics_tools(message):
    ctf_writeups = (
    "1. https://telegra.ph/TaipanByte-CTF-Forensics-GET-flagtxt-08-01\n"
    "2. https://telegra.ph/Codeby-Games-Forensics-Task-Earth-Rumble-2-Easy-level-08-01\n"
)
    bot.send_message(message.chat.id, f"CTF Write-ups:\n{ctf_writeups}", reply_markup=tools_keyboard, parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text == 'Extensions üß©')
def handle_forensics_tools(message):
    chrome_extensions_list = (
    "1. [Retire.js](https://chromewebstore.google.com/detail/retirejs/moibopkbhjceeedibkbkbchbjnkadmom?hl=en) - Detects outdated JavaScript libraries and vulnerabilities.\n"
    "2. [OWASP Penetration Tester Kit](https://chromewebstore.google.com/detail/owasp-penetration-testing/ojkchikaholjmcnefhjlbohackpeeknd) - Collection of tools for penetration testers.\n"
    "3. [Link Gopher](https://chromewebstore.google.com/detail/link-gopher/bpjdkodgnbfalgghnbeggfbfjpcfamkf?hl=en) - Extracts links from web pages.\n"
    "4. [jQuery Injector](https://chromewebstore.google.com/detail/jquery-injector/ekkjohcjbjcjjifokpingdbdlfekjcgi) - Injects custom jQuery scripts into web pages.\n"
    "5. [Dark Reader](https://chromewebstore.google.com/detail/dark-reader/eimadpbcbfnmbkopoojfekhnkhdbieeh) - Applies dark mode to web pages.\n"
    "6. [Cookie-Editor](https://chromewebstore.google.com/detail/cookie-editor/hlkenndednhfkekhgcdicdfddnkalmdm?hl=en) - Allows editing and managing cookies.\n"
    "7. [FoxyProxy](https://chromewebstore.google.com/detail/foxyproxy/gcknhkkoolaabfmlnjonogaaifnjlfnp?hl=en) - Proxy management tool.\n"
    "8. [Hack Tools](https://chromewebstore.google.com/detail/hack-tools/cmbndhnoonmghfofefkcccljbkdpamhi) - A collection of various hacking tools.\n"
    "9. [JWT Debugger](https://chromewebstore.google.com/detail/jwt-inspector/jgjihoodklabhdoeffdjofnknfijolgk?hl=en) - Debugs and inspects JSON Web Tokens.\n"
    "10. [Wappalyzer](https://chromewebstore.google.com/detail/wappalyzer-technology-pro/gppongmhjkpfnbhagpmjfkannfbllamg?hl=en) - Identifies technologies used on websites."
)

    bot.send_message(message.chat.id, f"Chrome Extensions List:\n{chrome_extensions_list}", reply_markup=tools_keyboard, parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text == 'OSINT üîç')
def handle_pentest_tools(message):
   osint_tools_list = (
    "1. [Maltego](https://www.paterva.com/) - A powerful tool for graphical link analysis and data mining, often used for mapping out relationships between entities.\n"
    "2. [Shodan](https://www.shodan.io/) - A search engine for discovering internet-connected devices and services.\n"
    "3. [TheHarvester](https://github.com/laramies/theHarvester) - Gathers emails, subdomains, hosts, and other information from different public sources.\n"
    "4. [Recon-ng](https://github.com/lanmaster53/recon-ng) - A full-featured web reconnaissance framework written in Python.\n"
    "5. [Censys](https://censys.io/) - Provides a search engine for discovering and analyzing every device exposed to the internet.\n"
    "6. [OSINT Framework](https://osintframework.com/) - A collection of OSINT tools categorized by their purpose and use case.\n"
    "7. [Google Dorks](https://www.exploit-db.com/google-hacking-database) - A method for using advanced Google search queries to find specific data on websites.\n"
    "8. [SpiderFoot](https://www.spiderfoot.net/) - An open-source intelligence automation tool that helps in gathering information from various sources.\n"
    "9. [Social Engineer Toolkit (SET)](https://github.com/trustedsec/social-engineer-toolkit) - A tool used for social engineering attacks, including phishing and credential harvesting.\n"
    "10. [Pipl](https://pipl.com/) - A people search engine that aggregates public records, social media, and other sources for detailed background checks.\n"
    "11. [Have I Been Pwned](https://haveibeenpwned.com/) - Allows users to check if their email or domain has been involved in a data breach.\n"
    "12. [Hunter](https://hunter.io/) - Helps find and verify email addresses from domains and companies.\n"
    "13. [Wayback Machine](https://archive.org/web/) - An internet archive that allows users to view archived versions of web pages.\n"
    "14. [FOCA](https://www.elevenpaths.com/labstools/foca/) - A tool for gathering metadata from documents to discover information about the target.\n"
    "15. [BuiltWith](https://builtwith.com/) - Analyzes websites to determine what technologies and services they use."
)

   bot.send_message(message.chat.id, f"OSINT Tools List:\n{osint_tools_list}", reply_markup=tools_keyboard, parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text == 'Google Dorking üëÄ')
def handle_pentest_tools(message):
   google_dorks_list = (
    "1. `site:example.com` - Restricts search results to the specified domain (e.g., `site:example.com`).\n"
    "2. `filetype:pdf` - Finds files of a specific type, such as PDF (e.g., `filetype:pdf confidential`).\n"
    "3. `intitle:index.of` - Finds open directories on web servers (e.g., `intitle:index.of mp3`).\n"
    "4. `inurl:admin` - Searches for URLs with 'admin' in them, often useful for finding admin login pages (e.g., `inurl:admin login`).\n"
    "5. `intext:password` - Searches for pages containing the word 'password', potentially revealing exposed credentials (e.g., `intext:password list`).\n"
    "6. `allinurl: login` - Finds pages with 'login' in the URL, useful for locating login forms (e.g., `allinurl: login`).\n"
    "7. `allintitle: 'confidential'` - Searches for pages with 'confidential' in the title, potentially revealing sensitive documents (e.g., `allintitle: confidential`).\n"
    "8. `intext:‚Äòconfidential‚Äô filetype:xls` - Finds Excel files with 'confidential' in the text (e.g., `intext:‚Äòconfidential‚Äô filetype:xls`).\n"
    "9. `cache:example.com` - Shows the cached version of a webpage (e.g., `cache:example.com`).\n"
    "10. `link:example.com` - Finds pages that link to the specified domain (e.g., `link:example.com`).\n"
    "11. `related:example.com` - Finds sites related to the specified domain (e.g., `related:example.com`).\n"
    "12. `define:‚Äòterm‚Äô` - Provides definitions for a specific term (e.g., `define: encryption`).\n"
    "13. `intitle:‚Äòindex of‚Äô ‚Äòbackup‚Äô` - Searches for directory listings related to 'backup' (e.g., `intitle:‚Äòindex of‚Äô ‚Äòbackup‚Äô`).\n"
    "14. `inurl:‚Äò/wp-admin/‚Äô` - Finds WordPress admin login pages (e.g., `inurl:‚Äò/wp-admin/‚Äô`).\n"
    "15. `filetype:log inurl:error` - Finds log files that may contain error messages (e.g., `filetype:log inurl:error`)."
)

   bot.send_message(message.chat.id, f"Google Dorking Commands List:\n{google_dorks_list}", reply_markup=tools_keyboard, parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text == 'Dictionaries üìí')
def handle_pentest_tools(message):
   password_dictionaries_list = (
    "1. [RockYou](https://github.com/brannondorsey/naive-hashcat/releases/download/2019/rockyou.txt.gz) - One of the most well-known password lists, derived from a data breach of the RockYou website.\n"
    "2. [10k Most Common Passwords](https://github.com/danielmiessler/SecLists/blob/master/Passwords/Common-Credentials/10k-most-common.txt) - A list of the 10,000 most common passwords used across various platforms.\n"
    "3. [SecLists - Common Passwords](https://github.com/danielmiessler/SecLists/blob/master/Passwords/Common-Credentials/rockyou.txt) - A collection of common passwords including the RockYou list and others.\n"
    "4. [CrackStation](https://crackstation.net/files/crackstation-human-only.txt.gz) - A list of passwords and common password patterns used for password cracking.\n"
    "5. [Deserialization Password List (DSPlusLeakyPaths)](https://github.com/deraz/DSPlusLeakyPaths) - A dictionary used to identify leaky paths in deserialization vulnerabilities.\n"
    "6. [FuzzDB](https://github.com/fuzzdb-project/fuzzdb) - A comprehensive dictionary that includes common passwords, sensitive files, and other useful data for penetration testing.\n"
    "7. [Weakpass](https://weakpass.com/) - A large collection of password lists including various breaches and common passwords.\n"
    "8. [John the Ripper's Default Wordlist](https://github.com/openwall/john/blob/bleeding-jumbo/run/password.lst) - Default wordlist used by John the Ripper for password cracking.\n"
    "9. [Pwdump](https://www.exploit-db.com/download/29863) - A collection of password dumps and wordlists used for cracking password hashes.\n"
    "10. [Hacking-Library's Wordlists](https://github.com/hacking-library/wordlists) - A collection of various wordlists for different types of password cracking tasks.\n"
    "11. [Hashcat‚Äôs Wordlists](https://hashcat.net/wordlists/) - Official wordlists provided by the Hashcat team for password cracking purposes.\n"
    "12. [Password Guessing Dataset](https://github.com/tedhwang/password-guessing-dataset) - A dataset of password guesses collected from various breaches.\n"
    "13. [MITRE's Password List](https://github.com/mitre/wordlists) - A password list curated by MITRE for use in various security contexts.\n"
    "14. [SecLists - Passwords](https://github.com/danielmiessler/SecLists/tree/master/Passwords) - A directory in SecLists repository containing various password lists and dictionaries.\n"
    "15. [Google's Password List](https://github.com/google/wordlists) - A collection of wordlists from Google, including common passwords and phrases."
)

   bot.send_message(message.chat.id, f"Password Dictionaries List:\n{password_dictionaries_list}", parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text == 'Books üìö')
def handle_pentest_tools(message):
   books_list = (
    "1. [Pentest Cheat Sheets](https://github.com/Kitsun3Sec/Pentest-Cheat-Sheets) - A comprehensive collection of cheat sheets and resources for penetration testing.\n"
    "2. [Penetration Testing: A Hands-On Introduction to Hacking by Georgia Weidman](https://www.amazon.com/Penetration-Testing-Hands-Introduction-Hacking/dp/1593275641) - A practical guide to penetration testing and ethical hacking.\n"
    "3. [The Web Application Hacker's Handbook: Finding and Exploiting Security Flaws by Dafydd Stuttard and Marcus Pinto](https://www.amazon.com/Web-Application-Hackers-Handbook-Exploiting/dp/1118026470) - A detailed book on web application security and testing.\n"
    "4. [Hacking: The Art of Exploitation by Jon Erickson](https://www.amazon.com/Hacking-Art-Exploitation-2nd/dp/1593271440) - A deep dive into hacking techniques and exploit development.\n"
    "5. [Metasploit: The Penetration Tester's Guide by David Kennedy, Jim O‚ÄôGorman, Devon Kearns, and Mati Aharoni](https://www.amazon.com/Metasploit-Penetration-Testers-Guide/dp/1118825072) - A comprehensive guide to using Metasploit for penetration testing.\n"
    "6. [Black Hat Python: Python Programming for Hackers and Pentesters, 2nd Edition by Justin Seitz](https://www.amazon.com/Black-Hat-Python-Programming-Pentesters/dp/1593278924) - Focuses on Python programming techniques for hacking and pentesting.\n"
    "7. [Linux Basics for Hackers: Getting Started with Networking, Scripting, and Security in Kali Linux by OccupyTheWeb](https://www.amazon.com/Linux-Basics-Hackers-Networking-Scripting/dp/159327855X) - An introduction to Linux for cybersecurity professionals.\n"
    "8. [The Art of Memory Forensics: Detecting Malware and Threats in Windows, Linux, and Mac Memory, 1st Edition by Michael Hale Ligh, Andrew Case, Jamie Levy, and AAron Walters](https://www.amazon.com/Art-Memory-Forensics-Detecting-Threats/dp/1118825072) - A guide to memory forensics and analysis techniques."
)

   bot.send_message(message.chat.id, f"Books List:\n{books_list}", parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text == 'Tutorials üë®‚Äçüè´')
def handle_pentest_tools(message):
   resources_list = (
    "1. [Web Application Pentesting Cheat Sheet](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Web%20Application%20Pentesting%20Cheat%20Sheet.md) - Comprehensive cheat sheet for pentesting web applications, including tools and techniques.\n"
    "2. [Active Directory Attack Cheat Sheet](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Active%20Directory%20Attack.md) - A guide on various attack vectors and methods for compromising Active Directory environments.\n"
    "3. [Linux Privilege Escalation Cheat Sheet](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation.md) - Techniques and methods for escalating privileges on Linux systems.\n"
    "4. [Network Pivoting Techniques](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Network%20Pivoting%20Techniques.md) - Methods for pivoting within networks to reach otherwise inaccessible systems.\n"
    "5. [Reverse Shell Cheat Sheet](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md) - A collection of reverse shell payloads and techniques for various platforms.\n"
    "6. [Subdomains Enumeration Cheat Sheet](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Subdomains%20Enumeration.md) - Techniques and tools for discovering and enumerating subdomains.\n"
    "7. [Cloud - AWS Pentest](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Cloud%20-%20AWS%20Pentest.md) - Methodologies and techniques for pentesting AWS environments.\n"
    "8. [Cloud - Azure Pentest](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest.md) - Methodologies and techniques for pentesting Azure environments.\n"
    "9. [Metasploit Cheat Sheet](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Metasploit%20-%20Cheatsheet.md) - A guide to using Metasploit effectively, with various commands and payloads.\n"
    "10. [Best of Python Pentest Cheat Sheet](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Best%20of%20Python%20Pentest%20Cheatsheet.md) - A collection of useful Python scripts and tools for penetration testing.\n"
    "11. [Live Hacking Tutorial: How to Think Like a Bug Bounty Hunter](https://www.youtube.com/watch?v=WPv1EYX_-0w).\n"
    "12. [The Best Bug Bounty Tutorial For Beginners in 2024](https://www.youtube.com/watch?v=L-qSSZIP3rU)."
)

   bot.send_message(message.chat.id, f"Resources List:\n{resources_list}", parse_mode='Markdown')



@bot.message_handler(func=lambda message: message.text == 'Back ‚è™')
def handle_back(message):
    bot.send_message(message.chat.id, "Returning to the menu ‚úÖ", reply_markup=main_menu_keyboard)


@bot.message_handler(func=lambda message: True)
def handle_unknown(message):
    bot.send_message(message.chat.id, "‚ùì Unknown command. Please use the menu buttons.", reply_markup=main_menu_keyboard)

if __name__ == '__main__':
    bot.polling(none_stop=True)
